// Function to fetch the queue data
  const fetchQueue = async () => {
    try {
      const response = await fetch("http://localhost:8000/api/v1/getQueue", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
        credentials: "include",
      });

      if (!response.ok) {
        throw new Error('Failed to fetch data');
      }

      const result = await response.json();
      // Ensure `result.message[0]` is an array
      if (Array.isArray(result?.message[0])) {
        setQueue(result?.message[0]);
      } else {
        console.error("Expected an array but got:", result?.message[0]);
        setQueue([]);
      }
    } catch (error) {
      console.error('Error fetching queue:', error);
    }
  };

  useEffect(() => {
    fetchQueue();
    const intervalId = setInterval(fetchQueue, 10000); // Refresh queue every 10 seconds
    return () => clearInterval(intervalId);
  }, []);

  // Function to handle skipping a token
  const handleSkipBtn = async (token_no) => {
    try {
      const response = await fetch("http://localhost:8000/api/v1/skip-token", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        credentials: "include",
        body: JSON.stringify({ token_no })
      });

      if (!response.ok) {
        throw new Error('Failed to skip token');
      }

      showSuccessAlert("Token skipped successfully");
      fetchQueue(); // Refresh queue after skipping a token
    } catch (error) {
      showErrorAlert(error.message);
    }
  };